/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void button_save_click1(GButton source, GEvent event) { //_CODE_:button_save:216087:
  triggerSave();
  //println("button2 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button_save:216087:

public void slider_yRotation_change(GSlider source, GEvent event) { //_CODE_:slider_yRotation:559070:
  //println("slider_yRotation - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_yRotation:559070:

public void slider_XZ_change1(GSlider2D source, GEvent event) { //_CODE_:slider_XZ:336042:
  //println("slider_XZ - GSlider2D >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_XZ:336042:

public void slider_height_change1(GSlider source, GEvent event) { //_CODE_:slider_height:889538:
  //println("slider_height - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_height:889538:

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider_scale_X:487261:
  //println("slider_scale_X - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_scale_X:487261:

public void slider2_change1(GSlider source, GEvent event) { //_CODE_:slider_scale_Y:318543:
  //println("slider_scale_Y - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_scale_Y:318543:

public void slider3_change1(GSlider source, GEvent event) { //_CODE_:slider_scale_Z:746219:
  //println("slider_scale_Z - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_scale_Z:746219:

public void slider_gridFrequency_change(GSlider source, GEvent event) { //_CODE_:slider_gridFrequency:959643:
  //println("slider_lineFrequency - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_gridFrequency:959643:

public void slider1_change2(GSlider source, GEvent event) { //_CODE_:slider_curvePrecision:725681:
  //println("slider_curvePrecision - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_curvePrecision:725681:

public void option1_clicked1(GOption source, GEvent event) { //_CODE_:option1:301875:
  //println("option1 - GOption >> GEvent." + event + " @ " + millis());
  control_projectionMode = 0;
} //_CODE_:option1:301875:

public void option2_clicked1(GOption source, GEvent event) { //_CODE_:option2:454197:
  //println("option2 - GOption >> GEvent." + event + " @ " + millis());
  control_projectionMode = 1;
} //_CODE_:option2:454197:

public void slider1_change3(GSlider source, GEvent event) { //_CODE_:slider_xRotation:469416:
  //println("slider_xRotation - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider_xRotation:469416:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  button_save = new GButton(this, 928, 976, 80, 30);
  button_save.setText("Save PDF");
  button_save.addEventHandler(this, "button_save_click1");
  slider_yRotation = new GSlider(this, 112, 992, 256, 16, 10.0);
  slider_yRotation.setShowValue(true);
  slider_yRotation.setLimits(0.0, -180.0, 180.0);
  slider_yRotation.setNumberFormat(G4P.DECIMAL, 2);
  slider_yRotation.setOpaque(false);
  slider_yRotation.addEventHandler(this, "slider_yRotation_change");
  label_yRotation = new GLabel(this, 16, 992, 80, 16);
  label_yRotation.setText("Y rotation");
  label_yRotation.setOpaque(false);
  slider_XZ = new GSlider2D(this, 432, 848, 160, 160);
  slider_XZ.setLimitsX(0.0, -0.5, 0.5);
  slider_XZ.setLimitsY(0.4, -0.5, 0.5);
  slider_XZ.setNumberFormat(G4P.DECIMAL, 2);
  slider_XZ.setOpaque(false);
  slider_XZ.addEventHandler(this, "slider_XZ_change1");
  label_position = new GLabel(this, 432, 832, 128, 16);
  label_position.setText("Position");
  label_position.setOpaque(false);
  slider_height = new GSlider(this, 624, 832, 176, 16, 10.0);
  slider_height.setRotation(PI/2, GControlMode.CORNER);
  slider_height.setLimits(0.0, -1.0, 1.0);
  slider_height.setNumberFormat(G4P.DECIMAL, 2);
  slider_height.setOpaque(false);
  slider_height.addEventHandler(this, "slider_height_change1");
  slider_scale_X = new GSlider(this, 112, 896, 256, 16, 10.0);
  slider_scale_X.setLimits(1.0, 0.1, 10.0);
  slider_scale_X.setNumberFormat(G4P.DECIMAL, 2);
  slider_scale_X.setOpaque(false);
  slider_scale_X.addEventHandler(this, "slider1_change1");
  slider_scale_Y = new GSlider(this, 112, 928, 256, 16, 10.0);
  slider_scale_Y.setLimits(1.0, 0.1, 10.0);
  slider_scale_Y.setNumberFormat(G4P.DECIMAL, 2);
  slider_scale_Y.setOpaque(false);
  slider_scale_Y.addEventHandler(this, "slider2_change1");
  slider_scale_Z = new GSlider(this, 112, 960, 256, 16, 10.0);
  slider_scale_Z.setLimits(1.0, 0.1, 10.0);
  slider_scale_Z.setNumberFormat(G4P.DECIMAL, 2);
  slider_scale_Z.setOpaque(false);
  slider_scale_Z.addEventHandler(this, "slider3_change1");
  label4 = new GLabel(this, 16, 896, 80, 16);
  label4.setText("Box Scale X");
  label4.setOpaque(false);
  slider_gridFrequency = new GSlider(this, 112, 832, 256, 16, 10.0);
  slider_gridFrequency.setLimits(10.0, 5.0, 30.0);
  slider_gridFrequency.setNumberFormat(G4P.DECIMAL, 2);
  slider_gridFrequency.setOpaque(false);
  slider_gridFrequency.addEventHandler(this, "slider_gridFrequency_change");
  label5 = new GLabel(this, 16, 928, 80, 16);
  label5.setText("Box Scale Y");
  label5.setOpaque(false);
  label6 = new GLabel(this, 16, 960, 80, 20);
  label6.setText("Box Scale Z");
  label6.setOpaque(false);
  label8 = new GLabel(this, 16, 864, 80, 16);
  label8.setText("Precision");
  label8.setOpaque(false);
  label7 = new GLabel(this, 16, 832, 80, 20);
  label7.setText("Grid Freq.");
  label7.setOpaque(false);
  slider_curvePrecision = new GSlider(this, 112, 864, 256, 16, 10.0);
  slider_curvePrecision.setLimits(50.0, 10.0, 200.0);
  slider_curvePrecision.setNumberFormat(G4P.DECIMAL, 2);
  slider_curvePrecision.setOpaque(false);
  slider_curvePrecision.addEventHandler(this, "slider1_change2");
  toggle_projectionMode = new GToggleGroup();
  option1 = new GOption(this, 640, 960, 120, 16);
  option1.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  option1.setText("Polar Hemispheric");
  option1.setOpaque(false);
  option1.addEventHandler(this, "option1_clicked1");
  option2 = new GOption(this, 640, 992, 120, 16);
  option2.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  option2.setText("Cylindrical");
  option2.setOpaque(false);
  option2.addEventHandler(this, "option2_clicked1");
  toggle_projectionMode.addControl(option1);
  option1.setSelected(true);
  toggle_projectionMode.addControl(option2);
  slider_xRotation = new GSlider(this, 400, 832, 176, 16, 10.0);
  slider_xRotation.setShowValue(true);
  slider_xRotation.setRotation(PI/2, GControlMode.CORNER);
  slider_xRotation.setLimits(0.0, -90.0, 90.0);
  slider_xRotation.setNumberFormat(G4P.DECIMAL, 2);
  slider_xRotation.setOpaque(false);
  slider_xRotation.addEventHandler(this, "slider1_change3");
}

// Variable declarations 
// autogenerated do not edit
GButton button_save; 
GSlider slider_yRotation; 
GLabel label_yRotation; 
GSlider2D slider_XZ; 
GLabel label_position; 
GSlider slider_height; 
GSlider slider_scale_X; 
GSlider slider_scale_Y; 
GSlider slider_scale_Z; 
GLabel label4; 
GSlider slider_gridFrequency; 
GLabel label5; 
GLabel label6; 
GLabel label8; 
GLabel label7; 
GSlider slider_curvePrecision; 
GToggleGroup toggle_projectionMode; 
GOption option1; 
GOption option2; 
GSlider slider_xRotation; 
